{
    "contents" : "# NER\nrm(list = ls())\nwd <- 'C:/Users/KLN/some_r'\nsetwd(wd)\nsource('util_fun.R')\n## need some java\n#install.packages(\"rJava\")\nlibrary(rJava)\n# english language model from datacube\n#install.packages(\"openNLPmodels.en\",\n#                 repos = \"http://datacube.wu.ac.at/\",\n#                 type = \"source\")\nlibrary(NLP)\nlibrary(openNLP)\nlibrary(RWeka)\n\n# import text\nmatt.v <- scan('data/kjv_books/Matthew.txt', what = 'character', sep='\\n', encoding = 'UTF-8')\n# use a pipe and another base function\nlibrary(dplyr)\nmatt.v <- readLines('data/kjv_books/Matthew.txt') %>% paste(collapse = ' ')\n\n## build annotators for words and sentences\n# NLP assumes string (not native to R)\nmatt.str <- as.String(matt.v)\nclass(matt.str)\n# annotator (model) for Java library\nwordanno <- Maxent_Word_Token_Annotator()\nsentanno <- Maxent_Sent_Token_Annotator()\n# apply and inspect annotators (first sentence then word)\nmatt.an <- annotate(matt.str, list(sentanno, wordanno))\nhead(matt.an)\ntail(matt.an)\n# annotate document\nmatt_annotated <- AnnotatedPlainTextDocument(matt.v, matt.an)\nsents(matt_annotated) %>% head(2)\nwords(matt_annotated) %>% tail(8)\n\n## annotate entities: person and location\npersonanno <- Maxent_Entity_Annotator(kind = 'person')\nlocationanno  <- Maxent_Entity_Annotator(kind = 'location')\n\n# second argument for annotate()\npipelineanno <- list(sentanno, wordanno, personanno, locationanno)\n\nmatt.an <- annotate(matt.v,pipelineanno) \n# annotate document\nmatt_annotated <- AnnotatedPlainTextDocument(matt.v,matt.an)\n# functions for extracting entities from annotated document (like words()/sents())\n# Extract entities from an AnnotatedPlainTextDocument\nentities <- function(doc, kind) {\n  doc.str <- doc$content # text as string string\n  doc.an <- annotations(doc)[[1]] # get annotations\n  if(hasArg(kind)) {\n    kind.l <- sapply(doc.an$features, '[[', \"kind\")# extract all annotations of kind\n    doc.str[doc.an[kind.l == kind]]\n  } else {\n    doc.str[doc.an[doc.an$type == \"entity\"]] # or all annotations of class entity\n  }\n}\n\n###\nperson.v <- unique(entities(matt_annotated,'person'))\nlocation.v <- unique(entities(matt_annotated,'location'))\n#save(person.v, location.v, file = 'matt_entities.RData')\n\n\n# scaling for several texts with pipes and lapply\nlibrary(NLP)\nlibrary(openNLP)\nlibrary(dplyr)\n\nfilenames.v <- Sys.glob(\"data/kjv_books/*.txt\")# wildcard expansion\nfilenames.v <- filenames.v[c(60,61,57)]# Synoptic Gospels\nbasename(filenames.v)\n# piping through the documents\ntexts.l <- filenames.v %>%\n  lapply(readLines) %>%\n  lapply(paste0, collapse = \" \") %>%\n  lapply(as.String)\nnames(texts.l) <- gsub(\"\\\\..*\",\"\",basename(filenames.v))\n# list of strings\nstr(texts.l, max.level = 1)\nclass(texts.l)\nclass(texts.l[[1]])\n# annotation \nentity.an <- function(doc, pipeline) {\n  annotations <- annotate(doc, pipeline)\n  AnnotatedPlainTextDocument(doc, annotations)\n}\n\n\n# second argument for entity.an\npipelineanno <- list(\n  Maxent_Sent_Token_Annotator(),\n  Maxent_Word_Token_Annotator(),\n  Maxent_Entity_Annotator(kind = \"person\"),\n  Maxent_Entity_Annotator(kind = \"location\")\n)\n\nsynop_annotated <- texts.l %>% \n  lapply(entity.an, pipelineanno)\n\nperson.l <- synop_annotated %>%\n  lapply(entities, kind = 'person') \nlocation.l <- synop_annotated %>%\n  lapply(entities, kind = 'location') \n\nn1 <- location.l %>% sapply(length)\nn2 <- location.l %>% lapply(unique) %>% sapply(length)\nN <- synop_annotated %>% lapply(words) %>% sapply(length)\nlocationratio.v <- n1/N # relative frequency of location\nuniqueratio.v <- n1/n2 # average use of locations\n# plot relative importance of location\nnames(locationratio.v) <- gsub('\\\\..*',\"\",names(locationratio.v))\nbarplot(locationratio.v, main = 'Location Entities', xlab = 'Book', ylab = 'Relative frequency')\n# geocode and map locations\nlibrary(ggmap)\nlibrary(rworldmap)\nalllocations.v <- union(location.l[[\"Mark\"]], location.l[[\"Matthew\"]]) %>% union(location.l[[\"Luke\"]])\nlocations_geocoded.df <- geocode(alllocations.v)\ndev.new()\nnewmap <- getMap(resolution = \"low\")\nplot(newmap)\n\n#plot(newmap, xlim = c(-20, 59), ylim = c(35, 71), asp = 1)\npoints(locations_geocoded.df$lon, locations_geocoded.df$lat, pch = 19, col = \"red\")\n# text(locations_geocoded.df$lon, locations_geocoded.df$lat, alllocations.v)\n\n",
    "created" : 1467889254838.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "653717053",
    "id" : "821E5AB6",
    "lastKnownWriteTime" : 1469701497,
    "path" : "~/courses/au_summer_university/summer_u2016/classes/tutorials/named_entities.R",
    "project_path" : "named_entities.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "type" : "r_source"
}