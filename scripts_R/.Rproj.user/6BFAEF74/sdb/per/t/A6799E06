{
    "contents" : "# introduction to basic use of R\n\n### navigating directories\ngetwd()# current working directory\ndir()# files in directory\nwd = 'C:/Users/KLN/some_r'\n# wd = '~/courses/au_summer_university/summer_u2016/classes/tutorials'\nsetwd(wd)\n\n### use R for basic calculations\n2+3\n3-2\n2*3\n3/2\n# R is a functional language (avoid explicit iteration), express iterative behavior implicitly\n\"+\"(2,3)\n3-2 # press ENTER -> \"+\" dcontinuation character in console\n3-     2 # spaces are ignored\n2+3;3-2 # multiple commands on same line\n# operator precedence (and logical operators)\n2+3*4 == 2+(3*4)\n2+3*4 != (2+3)*4\n# exponentiation\n3^2 == 3*3\n2^3 == 2*2*2\n# some additional operators\nsqrt(3^2)\nabs(-2)\nlog(3) # base e\nlog(exp(3))\nlog(3, base = 10) # base 10\n\n### declarations - storing objects in the R environment\n\n## vector: an vector/array of elements where all elements must be same primitive data type\n\n# vector types: numeric, character, logical, factor \nx.num <- c(1,3,5, 5, 1); print(x.num)\nclass(x.num)# abstract type\ntypeof(x.num)# data type\nmode(x.num)\nx.char <- c('All hope abandon,', 'ye who enter here!'); print(x.char)\nclass(x.char)\nx.log <- x.num == 5; print(x.log)\nclass(x.log)\nx.fac <- as.factor(x.num); print(x.fac)# compound object\nclass(x.fac)\ntypeof(x.fac)\n\n# numeric\na.vec <- 2+3# scalar\nmode(a.vec)# check object data type\nprint(a.vec)\na.vec# shorthand\nprint(a.Vec)# case sensitive\n\ntwoelement.vec <- c(2,3)# combine two elements in longer array\nlength(twoelement.vec)# length of array\n#2element.vec <- c(2,3) # numbers cannot start a variable name\na2element.vec <- c(2,3)\nthreeelement.vec <- c(twoelement.vec,1)\n\n# vector indexing\nthreeelement.vec[1]\nthreeelement.vec[3]\nthreeelement.vec[0]# notice that R use one-based indexing\nthreeelement.vec[-1]# all except 1\nthreeelement.vec[-1:-3]\n\n# character strings\nstr.vec <- 'this is a character string'\nmode(str.vec)\nlength(str.vec)\nstr2.vec <- c('this is a character string', 'this is another string')\nlength(str2.vec)\nstr3.vec <- c(str2.vec, 'and yet another') # add element\nstrcoer.vec(a.vec,str.vec)#  numeric values are being coerced into character strings when the two vectors are combined\n\n## Data structures: matrix, list, data frame\n\nx.mat <- matrix(data = c(1,2,3,3,2,1),nrow = 2); print(a.mat)\nx.ls <- list(x.num,x.char); print(x.ls)\nx.dt <- data.frame(x.num[1:2],x.char); print(x.dt)\n\n\n## matrix: n-dimensional arrays (vector with dimensions added to it)\na.mat <- matrix(c(1,3,4,2),nrow = 2)\na.mat <- rbind(c(1,4),c(3,2))\nmode(a.mat)\nclass(a.mat)\na.matprint(a.mat)\nlength(a.mat)# number of elements\nnrow(a.mat)# number of rows\nncol(a.mat)# number of columns\ndim(a.mat)# dimensions\ndimnames(a.mat) <- list(c('doc1','doc2'), c('term1','term2')) # dimensions names\nprint(a.mat)\n\n# matrix indexing\na.mat[3] == a.mat[1,2]\na.mat[2,]# row two\na.mat[,1]# column one \n\n## list:  a structure that may contain object of any other types. \na.ls = list(somechar = c('term1','term2', 'term3'), somenum = c(2,3,4))\nprint(a.ls)\na.ls[[2]]# index list elements\na.ls$somechar# tags\na.ls$somechar == a.ls[[1]]\na.ls[[1]][3]# index members\nmode(a.ls)\nmode(a.ls$somenum)\nstr(a.ls)# print internal structure\n\n## data frames: table with variables in columns and cases in rows (share properties of matrices and lists)\n  # great for metadata\na.dt <- data.frame(author = c('Chaucer','Shakespeare','Austen'), born = c(1343,1564,1775))\nprint(a.dt)\na.dt[[1]]# index\na.dt$author# tag\na.dt$author[3]\na.dt[,1]# matrix\nstr(a.dt)\nclass(a.dt)\n\n## logical operators and vectors\n# exactly equal to\na.vec <- c(1,3,5,5,1,2)\nidx <- a.vec == 5 # indexing\na.vec[idx]\na.vec[a.vec == 5]\n# not equal to\na.vec != 5\n# less than\na.vec < 5\n# greater than\na.vec > 5\n# logical indexing in character vectors\na.str <- c('Andersen','Kierkegaard','Grundtvig')\na.str == 'Grundtvig'# also for characters\ndrseuss <- strsplit('I am Daniel, I am Sam, Sam I am',' ') \n\nprint(sum(drseuss[[1]] == 'I'))\nplot(drseuss[[1]] == 'I',type = 'b', xlab = 'Time', ylab = 'Occurrences of I')\n\n### save and remove variables\nsave.image('some_image.RData')# save session workspace\nls()# show workspace\nsave(a.dt, a.mat, file = 'some_data.RData')# save specific variables\nrm(a.dt,a.mat)# remove specific variables\nrm(list = ls())# remove all content of workspace\nload(\"some_data.RData\")# load data file\nload(\"some_image.RData\")\n\n### getting help\n?save\nhelp(save)\nexample(save)\nhelp(package=\"tm\")\nhelp.search(\"tokenize\")\n# if you have loaded a package namespace and attached it to the search list\nlibrary(tm)\nls('package:tm')# list content \n",
    "created" : 1466409162010.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3058459390",
    "id" : "A6799E06",
    "lastKnownWriteTime" : 1469462356,
    "path" : "~/courses/au_summer_university/summer_u2016/classes/tutorials/r_basics.R",
    "project_path" : "r_basics.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}